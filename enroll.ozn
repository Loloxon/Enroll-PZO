output (([("assignment = ["++join(",",[("{"++join(", ",[show(g) | g in Group where fix(GroupAssignmentB[s,g]), ]))++"}" | s in Student, ]))++"];\n"]++[("total_break_disappointment = "++show(sum([normalized_break_disappointment[S] | S in Student, ])))++";\n"])++[("total_preference_disappointment = "++show(sum(preference_disappointment)))++";\n"])++[("objective = "++show(objective))++";\n"];
int: n_time_units_in_hour = 3;
set of int: Student = 1..5;
set of int: Class = 1..4;
set of int: Group = 1..6;
set of int: Day = 1..2;
array [Student,Group] of int: student_prefers = [|-1,4,8,6,2,4|2,2,2,2,0,6|7,3,6,1,7,3|7,6,4,3,-1,1|1,-1,-1,-1,-1,-1|];
array [Student] of int: student_break_importance = [2,0,1,3,4];
array [Class] of int: class_duration = [6,4,6,4];
array [Group] of int: group_start = [16,28,36,16,28,36];
array [Group] of int: group_day = [2,1,2,1,1,1];
array [Student,Class] of int: GroupAssignment;
array [Student,Class] of int: got_preferences = array2d(Student,Class,[if GroupAssignment[S,C]!=0 then student_prefers[S,GroupAssignment[S,C]] else -1 endif | S in Student, C in Class, ]);
array [Student,Class] of int: best_preferences = [|-1,8,6,4|2,2,2,6|7,6,1,7|7,6,3,1|1,-1,-1,-1|];
array [Student] of int: preference_disappointment = [sum([best_preferences[S,C]-got_preferences[S,C] | C in Class, ]) | S in Student, ];
array [Student,Day] of int: staying_at_uni = array2d(Student,Day,[max(max([if GroupAssignment[S,C]!=0 /\ group_day[GroupAssignment[S,C]]==D then group_start[GroupAssignment[S,C]]+class_duration[C] else 0 endif | C in Class, ])-min([if GroupAssignment[S,C]!=0 /\ group_day[GroupAssignment[S,C]]==D then group_start[GroupAssignment[S,C]] else n_time_units_in_hour*24 endif | C in Class, ]),0) | S in Student, D in Day, ]);
array [Student,Day] of int: length_of_lessons;
array [Student] of int: break_disappointment = [sum([staying_at_uni[S,D]-length_of_lessons[S,D] | D in Day where staying_at_uni[S,D]>=0, ]) | S in Student, ];
function int : ceil_div(int: x,int: y) = x div y+bool2int(x mod y > 0);
array [Student] of int: normalized_break_disappointment = [ceil_div(break_disappointment[S],n_time_units_in_hour) | S in Student, ];
int: objective = sum([pow(ceil_div(student_break_importance[S]*normalized_break_disappointment[S]+(10-student_break_importance[S])*preference_disappointment[S],10),2) | S in Student, ]);
bool: X_INTRODUCED_3561_ = reverse_map(X_INTRODUCED_18608_);
test reverse_map(int: x) = x==1;
int: X_INTRODUCED_18608_ = 0;
bool: X_INTRODUCED_3560_ = reverse_map(X_INTRODUCED_18607_);
int: X_INTRODUCED_18607_ = 0;
bool: X_INTRODUCED_3559_ = reverse_map(X_INTRODUCED_18606_);
int: X_INTRODUCED_18606_ = 0;
bool: X_INTRODUCED_3558_ = reverse_map(X_INTRODUCED_18605_);
int: X_INTRODUCED_18605_ = 0;
bool: X_INTRODUCED_3557_ = reverse_map(X_INTRODUCED_18604_);
int: X_INTRODUCED_18604_ = 0;
bool: X_INTRODUCED_3556_ = reverse_map(X_INTRODUCED_18592_);
int: X_INTRODUCED_18592_;
bool: X_INTRODUCED_3555_ = reverse_map(X_INTRODUCED_18580_);
int: X_INTRODUCED_18580_;
bool: X_INTRODUCED_3554_ = reverse_map(X_INTRODUCED_18568_);
int: X_INTRODUCED_18568_;
bool: X_INTRODUCED_3553_ = reverse_map(X_INTRODUCED_18556_);
int: X_INTRODUCED_18556_;
bool: X_INTRODUCED_3552_ = reverse_map(X_INTRODUCED_18544_);
int: X_INTRODUCED_18544_;
bool: X_INTRODUCED_3551_ = reverse_map(X_INTRODUCED_18532_);
int: X_INTRODUCED_18532_;
bool: X_INTRODUCED_3550_ = reverse_map(X_INTRODUCED_18520_);
int: X_INTRODUCED_18520_;
bool: X_INTRODUCED_3549_ = reverse_map(X_INTRODUCED_18508_);
int: X_INTRODUCED_18508_;
bool: X_INTRODUCED_3548_ = reverse_map(X_INTRODUCED_18496_);
int: X_INTRODUCED_18496_;
bool: X_INTRODUCED_3547_ = reverse_map(X_INTRODUCED_18484_);
int: X_INTRODUCED_18484_;
bool: X_INTRODUCED_3546_ = reverse_map(X_INTRODUCED_18472_);
int: X_INTRODUCED_18472_;
bool: X_INTRODUCED_3545_ = reverse_map(X_INTRODUCED_18460_);
int: X_INTRODUCED_18460_;
bool: X_INTRODUCED_3544_ = reverse_map(X_INTRODUCED_18448_);
int: X_INTRODUCED_18448_;
bool: X_INTRODUCED_3543_ = reverse_map(X_INTRODUCED_18436_);
int: X_INTRODUCED_18436_;
bool: X_INTRODUCED_3542_ = reverse_map(X_INTRODUCED_18424_);
int: X_INTRODUCED_18424_;
bool: X_INTRODUCED_3541_ = reverse_map(X_INTRODUCED_18412_);
int: X_INTRODUCED_18412_;
bool: X_INTRODUCED_3540_ = reverse_map(X_INTRODUCED_18400_);
int: X_INTRODUCED_18400_;
bool: X_INTRODUCED_3539_ = reverse_map(X_INTRODUCED_18388_);
int: X_INTRODUCED_18388_;
bool: X_INTRODUCED_3538_ = reverse_map(X_INTRODUCED_18376_);
int: X_INTRODUCED_18376_;
bool: X_INTRODUCED_3537_ = reverse_map(X_INTRODUCED_18364_);
int: X_INTRODUCED_18364_;
bool: X_INTRODUCED_3536_ = reverse_map(X_INTRODUCED_18352_);
int: X_INTRODUCED_18352_;
bool: X_INTRODUCED_3535_ = reverse_map(X_INTRODUCED_18340_);
int: X_INTRODUCED_18340_;
bool: X_INTRODUCED_3534_ = reverse_map(X_INTRODUCED_18328_);
int: X_INTRODUCED_18328_;
bool: X_INTRODUCED_3533_ = reverse_map(X_INTRODUCED_18316_);
int: X_INTRODUCED_18316_;
bool: X_INTRODUCED_3532_ = reverse_map(X_INTRODUCED_18315_);
int: X_INTRODUCED_18315_ = 0;
array [Student,Group] of bool: GroupAssignmentB = [|X_INTRODUCED_3532_,X_INTRODUCED_3533_,X_INTRODUCED_3534_,X_INTRODUCED_3535_,X_INTRODUCED_3536_,X_INTRODUCED_3537_|X_INTRODUCED_3538_,X_INTRODUCED_3539_,X_INTRODUCED_3540_,X_INTRODUCED_3541_,X_INTRODUCED_3542_,X_INTRODUCED_3543_|X_INTRODUCED_3544_,X_INTRODUCED_3545_,X_INTRODUCED_3546_,X_INTRODUCED_3547_,X_INTRODUCED_3548_,X_INTRODUCED_3549_|X_INTRODUCED_3550_,X_INTRODUCED_3551_,X_INTRODUCED_3552_,X_INTRODUCED_3553_,X_INTRODUCED_3554_,X_INTRODUCED_3555_|X_INTRODUCED_3556_,X_INTRODUCED_3557_,X_INTRODUCED_3558_,X_INTRODUCED_3559_,X_INTRODUCED_3560_,X_INTRODUCED_3561_|];
