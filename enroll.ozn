output ((([("assignment = ["++join(",",[("{"++join(", ",[show(g) | g in Group where fix(GroupAssignmentB[s,g]), ]))++"}" | s in Student, ]))++"];\n"]++[("total_late_disappointment = "++show(sum([late_disappointment[S] | S in Student, ])))++";\n"])++[("total_break_disappointment = "++show(sum([break_disappointment[S] | S in Student, ])))++";\n"])++[("total_preference_disappointment = "++show(sum(preference_disappointment)))++";\n"])++[("objective = "++show(objective))++";\n"];
int: n_time_units_in_hour = 12;
int: late_to_disappointment_multiplier = 2;
int: break_to_disappointment_multiplier = 1;
set of int: Student = 1..5;
set of int: Class = 1..2;
set of int: Group = 1..6;
set of int: Day = 1..2;
array [Student,Group] of int: student_prefers = [|-1,4,8,6,2,4|2,2,2,2,0,6|7,3,6,1,7,3|7,6,4,3,-1,1|1,-1,-1,-1,-1,-1|];
array [Class] of int: class_duration = [18,24];
array [Group] of int: group_start = [96,96,108,96,108,110];
array [Group] of int: group_day = [1,2,2,1,1,2];
array [Student,Class] of int: GroupAssignment;
array [Student,Class] of int: got_preferences = array2d(Student,Class,[if GroupAssignment[S,C]!=0 then student_prefers[S,GroupAssignment[S,C]] else -1 endif | S in Student, C in Class, ]);
array [Student,Class] of int: best_preferences = [|8,6|2,6|7,7|7,3|1,-1|];
array [Student] of int: preference_disappointment = [sum([best_preferences[S,C]-got_preferences[S,C] | C in Class, ]) | S in Student, ];
array [Student,Day] of int: staying_at_uni = array2d(Student,Day,[max(max([if GroupAssignment[S,C]!=0 /\ group_day[GroupAssignment[S,C]]==D then group_start[GroupAssignment[S,C]]+class_duration[C] else 0 endif | C in Class, ])-min([if GroupAssignment[S,C]!=0 /\ group_day[GroupAssignment[S,C]]==D then group_start[GroupAssignment[S,C]] else n_time_units_in_hour*24 endif | C in Class, ]),0) | S in Student, D in Day, ]);
array [Student,Day] of int: length_of_lessons;
array [Student] of int: break_disappointment = [sum([staying_at_uni[S,D]-length_of_lessons[S,D] | D in Day where staying_at_uni[S,D]>=0, ]) | S in Student, ];
array [Student] of int: late_disappointment;
int: objective = sum([pow(preference_disappointment[S]+break_to_disappointment_multiplier*break_disappointment[S]+late_to_disappointment_multiplier*late_disappointment[S],2) | S in Student, ]);
bool: X_INTRODUCED_2819_ = false;
bool: X_INTRODUCED_2818_ = false;
bool: X_INTRODUCED_2817_ = false;
bool: X_INTRODUCED_2816_ = false;
bool: X_INTRODUCED_2815_ = false;
bool: X_INTRODUCED_2814_ = true;
bool: X_INTRODUCED_2813_ = reverse_map(X_INTRODUCED_4571_);
test reverse_map(int: x) = x==1;
int: X_INTRODUCED_4571_;
bool: X_INTRODUCED_2812_ = false;
bool: X_INTRODUCED_2811_ = reverse_map(X_INTRODUCED_4554_);
int: X_INTRODUCED_4554_;
bool: X_INTRODUCED_2810_ = reverse_map(X_INTRODUCED_4543_);
int: X_INTRODUCED_4543_;
bool: X_INTRODUCED_2809_ = reverse_map(X_INTRODUCED_4532_);
int: X_INTRODUCED_4532_;
bool: X_INTRODUCED_2808_ = reverse_map(X_INTRODUCED_4521_);
int: X_INTRODUCED_4521_;
bool: X_INTRODUCED_2807_ = reverse_map(X_INTRODUCED_4510_);
int: X_INTRODUCED_4510_;
bool: X_INTRODUCED_2806_ = reverse_map(X_INTRODUCED_4499_);
int: X_INTRODUCED_4499_;
bool: X_INTRODUCED_2805_ = reverse_map(X_INTRODUCED_4488_);
int: X_INTRODUCED_4488_;
bool: X_INTRODUCED_2804_ = reverse_map(X_INTRODUCED_4477_);
int: X_INTRODUCED_4477_;
bool: X_INTRODUCED_2803_ = reverse_map(X_INTRODUCED_4466_);
int: X_INTRODUCED_4466_;
bool: X_INTRODUCED_2802_ = reverse_map(X_INTRODUCED_4455_);
int: X_INTRODUCED_4455_;
bool: X_INTRODUCED_2801_ = reverse_map(X_INTRODUCED_4444_);
int: X_INTRODUCED_4444_;
bool: X_INTRODUCED_2800_ = reverse_map(X_INTRODUCED_4433_);
int: X_INTRODUCED_4433_;
bool: X_INTRODUCED_2799_ = reverse_map(X_INTRODUCED_4422_);
int: X_INTRODUCED_4422_;
bool: X_INTRODUCED_2798_ = reverse_map(X_INTRODUCED_4411_);
int: X_INTRODUCED_4411_;
bool: X_INTRODUCED_2797_ = reverse_map(X_INTRODUCED_4400_);
int: X_INTRODUCED_4400_;
bool: X_INTRODUCED_2796_ = reverse_map(X_INTRODUCED_4389_);
int: X_INTRODUCED_4389_;
bool: X_INTRODUCED_2795_ = false;
bool: X_INTRODUCED_2794_ = reverse_map(X_INTRODUCED_4378_);
int: X_INTRODUCED_4378_;
bool: X_INTRODUCED_2793_ = reverse_map(X_INTRODUCED_4367_);
int: X_INTRODUCED_4367_;
bool: X_INTRODUCED_2792_ = reverse_map(X_INTRODUCED_4356_);
int: X_INTRODUCED_4356_;
bool: X_INTRODUCED_2791_ = reverse_map(X_INTRODUCED_4345_);
int: X_INTRODUCED_4345_;
bool: X_INTRODUCED_2790_ = false;
array [Student,Group] of bool: GroupAssignmentB = [|X_INTRODUCED_2790_,X_INTRODUCED_2791_,X_INTRODUCED_2792_,X_INTRODUCED_2793_,X_INTRODUCED_2794_,X_INTRODUCED_2795_|X_INTRODUCED_2796_,X_INTRODUCED_2797_,X_INTRODUCED_2798_,X_INTRODUCED_2799_,X_INTRODUCED_2800_,X_INTRODUCED_2801_|X_INTRODUCED_2802_,X_INTRODUCED_2803_,X_INTRODUCED_2804_,X_INTRODUCED_2805_,X_INTRODUCED_2806_,X_INTRODUCED_2807_|X_INTRODUCED_2808_,X_INTRODUCED_2809_,X_INTRODUCED_2810_,X_INTRODUCED_2811_,X_INTRODUCED_2812_,X_INTRODUCED_2813_|X_INTRODUCED_2814_,X_INTRODUCED_2815_,X_INTRODUCED_2816_,X_INTRODUCED_2817_,X_INTRODUCED_2818_,X_INTRODUCED_2819_|];
