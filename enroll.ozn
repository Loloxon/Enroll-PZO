output (((([("assignment = ["++join(",",[("{"++join(", ",[show(g) | g in Group where fix(GroupAssignmentB[s,g]), ]))++"}" | s in Student, ]))++"];\n"]++[("time spent at univer: "++show([staying_at_uni[S,C] | S in Student, C in Class, ]))++"\n"])++[("length of lessons:    "++show([length_of_lessons[S,C] | S in Student, C in Class, ]))++"\n"])++[("total_break_disappointment = "++show(sum([break_disappointment[S] | S in Student, ])))++";\n"])++[("total_preference_disappointment = "++show(sum(preference_disappointment)))++";\n"])++[("objective = "++show(objective))++";\n"];
int: n_time_units_in_hour = 12;
set of int: Student = 1..5;
set of int: Class = 1..2;
set of int: Group = 1..6;
set of int: Day = 1..2;
array [Student,Group] of int: student_prefers = [|-1,4,8,6,2,4|2,2,2,2,0,6|7,3,6,1,7,3|7,6,4,3,-1,1|1,-1,-1,-1,-1,-1|];
array [Student] of int: student_break_importance = [1,0,0,3,4];
array [Class] of int: class_duration = [18,24];
array [Group] of int: group_start = [96,96,108,96,108,110];
array [Group] of int: group_day = [1,2,2,1,1,2];
array [Student,Class] of int: GroupAssignment;
array [Student,Class] of int: got_preferences = array2d(Student,Class,[if GroupAssignment[S,C]!=0 then student_prefers[S,GroupAssignment[S,C]] else -1 endif | S in Student, C in Class, ]);
array [Student,Class] of int: best_preferences = [|8,6|2,6|7,7|7,3|1,-1|];
array [Student] of int: preference_disappointment = [sum([best_preferences[S,C]-got_preferences[S,C] | C in Class, ]) | S in Student, ];
array [Student,Day] of int: staying_at_uni = array2d(Student,Day,[max(max([if GroupAssignment[S,C]!=0 /\ group_day[GroupAssignment[S,C]]==D then group_start[GroupAssignment[S,C]]+class_duration[C] else 0 endif | C in Class, ])-min([if GroupAssignment[S,C]!=0 /\ group_day[GroupAssignment[S,C]]==D then group_start[GroupAssignment[S,C]] else n_time_units_in_hour*24 endif | C in Class, ]),0) | S in Student, D in Day, ]);
array [Student,Day] of int: length_of_lessons;
array [Student] of int: break_disappointment = [sum([staying_at_uni[S,D]-length_of_lessons[S,D] | D in Day where staying_at_uni[S,D]>=0, ]) | S in Student, ];
function int : ceil_div(int: x,int: y) = x div y+bool2int(x mod y > 0);
int: objective = sum([pow(ceil_div(student_break_importance[S]*break_disappointment[S]+(10-student_break_importance[S])*preference_disappointment[S],10),2) | S in Student, ]);
bool: X_INTRODUCED_1121_ = false;
bool: X_INTRODUCED_1120_ = false;
bool: X_INTRODUCED_1119_ = false;
bool: X_INTRODUCED_1118_ = false;
bool: X_INTRODUCED_1117_ = false;
bool: X_INTRODUCED_1116_ = true;
bool: X_INTRODUCED_1115_ = reverse_map(X_INTRODUCED_2879_);
test reverse_map(int: x) = x==1;
int: X_INTRODUCED_2879_;
bool: X_INTRODUCED_1114_ = false;
bool: X_INTRODUCED_1113_ = reverse_map(X_INTRODUCED_2862_);
int: X_INTRODUCED_2862_;
bool: X_INTRODUCED_1112_ = reverse_map(X_INTRODUCED_2851_);
int: X_INTRODUCED_2851_;
bool: X_INTRODUCED_1111_ = reverse_map(X_INTRODUCED_2840_);
int: X_INTRODUCED_2840_;
bool: X_INTRODUCED_1110_ = reverse_map(X_INTRODUCED_2829_);
int: X_INTRODUCED_2829_;
bool: X_INTRODUCED_1109_ = reverse_map(X_INTRODUCED_2818_);
int: X_INTRODUCED_2818_;
bool: X_INTRODUCED_1108_ = reverse_map(X_INTRODUCED_2807_);
int: X_INTRODUCED_2807_;
bool: X_INTRODUCED_1107_ = reverse_map(X_INTRODUCED_2796_);
int: X_INTRODUCED_2796_;
bool: X_INTRODUCED_1106_ = reverse_map(X_INTRODUCED_2785_);
int: X_INTRODUCED_2785_;
bool: X_INTRODUCED_1105_ = reverse_map(X_INTRODUCED_2774_);
int: X_INTRODUCED_2774_;
bool: X_INTRODUCED_1104_ = reverse_map(X_INTRODUCED_2763_);
int: X_INTRODUCED_2763_;
bool: X_INTRODUCED_1103_ = reverse_map(X_INTRODUCED_2752_);
int: X_INTRODUCED_2752_;
bool: X_INTRODUCED_1102_ = reverse_map(X_INTRODUCED_2741_);
int: X_INTRODUCED_2741_;
bool: X_INTRODUCED_1101_ = reverse_map(X_INTRODUCED_2730_);
int: X_INTRODUCED_2730_;
bool: X_INTRODUCED_1100_ = reverse_map(X_INTRODUCED_2719_);
int: X_INTRODUCED_2719_;
bool: X_INTRODUCED_1099_ = reverse_map(X_INTRODUCED_2708_);
int: X_INTRODUCED_2708_;
bool: X_INTRODUCED_1098_ = reverse_map(X_INTRODUCED_2697_);
int: X_INTRODUCED_2697_;
bool: X_INTRODUCED_1097_ = false;
bool: X_INTRODUCED_1096_ = reverse_map(X_INTRODUCED_2686_);
int: X_INTRODUCED_2686_;
bool: X_INTRODUCED_1095_ = reverse_map(X_INTRODUCED_2675_);
int: X_INTRODUCED_2675_;
bool: X_INTRODUCED_1094_ = reverse_map(X_INTRODUCED_2664_);
int: X_INTRODUCED_2664_;
bool: X_INTRODUCED_1093_ = reverse_map(X_INTRODUCED_2653_);
int: X_INTRODUCED_2653_;
bool: X_INTRODUCED_1092_ = false;
array [Student,Group] of bool: GroupAssignmentB = [|X_INTRODUCED_1092_,X_INTRODUCED_1093_,X_INTRODUCED_1094_,X_INTRODUCED_1095_,X_INTRODUCED_1096_,X_INTRODUCED_1097_|X_INTRODUCED_1098_,X_INTRODUCED_1099_,X_INTRODUCED_1100_,X_INTRODUCED_1101_,X_INTRODUCED_1102_,X_INTRODUCED_1103_|X_INTRODUCED_1104_,X_INTRODUCED_1105_,X_INTRODUCED_1106_,X_INTRODUCED_1107_,X_INTRODUCED_1108_,X_INTRODUCED_1109_|X_INTRODUCED_1110_,X_INTRODUCED_1111_,X_INTRODUCED_1112_,X_INTRODUCED_1113_,X_INTRODUCED_1114_,X_INTRODUCED_1115_|X_INTRODUCED_1116_,X_INTRODUCED_1117_,X_INTRODUCED_1118_,X_INTRODUCED_1119_,X_INTRODUCED_1120_,X_INTRODUCED_1121_|];
