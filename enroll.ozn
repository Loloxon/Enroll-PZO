output (([("assignment = ["++join(",",[("{"++join(", ",[show(g) | g in Group where fix(GroupAssignmentB[s,g]), ]))++"}" | s in Student, ]))++"];\n"]++[("total_break_disappointment = "++show(sum([normalized_break_disappointment[S] | S in Student, ])))++";\n"])++[("total_preference_disappointment = "++show(sum(preference_disappointment)))++";\n"])++[("objective = "++show(objective))++";\n"];
set of int: Student = 1..174;
set of int: Class = 1..25;
set of int: Group = 1..127;
array [Group] of int: group_class = [1,1,2,3,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,8,8,8,8,8,8,8,8,8,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,12,12,12,12,12,12,12,12,12,12,12,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,16,16,16,16,16,17,18,18,18,18,18,18,18,18,19,20,20,20,20,20,20,20,20,20,20,20,20,20,21,22,22,22,23,24,24,24,24,24,24,24,25];
array [Student] of int: preference_disappointment;
array [Student] of int: normalized_break_disappointment;
array [Student,Class] of int: GroupAssignment;
int: objective;
array [Student,Group] of bool: GroupAssignmentB = array2d(Student,Group,[GroupAssignment[S,group_class[G]]!=0 /\ GroupAssignment[S,group_class[G]]==G | S in Student, G in Group, ]);
