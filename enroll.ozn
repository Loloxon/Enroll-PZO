output (([("assignment = ["++join(",",[("{"++join(", ",[show(g) | g in Group where fix(GroupAssignmentB[s,g]), ]))++"}" | s in Student, ]))++"];\n"]++[("total_break_disappointment = "++show(sum([normalized_break_disappointment[S] | S in Student, ])))++";\n"])++[("total_preference_disappointment = "++show(sum(preference_disappointment)))++";\n"])++[("objective = "++show(objective))++";\n"];
int: n_time_units_in_hour = 12;
set of int: Student = 1..5;
set of int: Class = 1..2;
set of int: Group = 1..6;
set of int: Day = 1..2;
array [Student,Group] of int: student_prefers = [|-1,4,8,6,2,4|2,2,2,2,0,6|7,3,6,1,7,3|7,6,4,3,-1,1|1,-1,-1,-1,-1,-1|];
array [Student] of int: student_break_importance = [1,0,0,3,4];
array [Class] of int: class_duration = [18,24];
array [Group] of int: group_start = [96,96,108,96,108,110];
array [Group] of int: group_day = [1,2,2,1,1,2];
array [Student,Class] of int: GroupAssignment;
array [Student,Class] of int: got_preferences = array2d(Student,Class,[if GroupAssignment[S,C]!=0 then student_prefers[S,GroupAssignment[S,C]] else -1 endif | S in Student, C in Class, ]);
array [Student,Class] of int: best_preferences = [|8,6|2,6|7,7|7,3|1,-1|];
array [Student] of int: preference_disappointment = [sum([best_preferences[S,C]-got_preferences[S,C] | C in Class, ]) | S in Student, ];
array [Student,Day] of int: staying_at_uni = array2d(Student,Day,[max(max([if GroupAssignment[S,C]!=0 /\ group_day[GroupAssignment[S,C]]==D then group_start[GroupAssignment[S,C]]+class_duration[C] else 0 endif | C in Class, ])-min([if GroupAssignment[S,C]!=0 /\ group_day[GroupAssignment[S,C]]==D then group_start[GroupAssignment[S,C]] else n_time_units_in_hour*24 endif | C in Class, ]),0) | S in Student, D in Day, ]);
array [Student,Day] of int: length_of_lessons;
array [Student] of int: break_disappointment = [sum([staying_at_uni[S,D]-length_of_lessons[S,D] | D in Day where staying_at_uni[S,D]>=0, ]) | S in Student, ];
function int : ceil_div(int: x,int: y) = x div y+bool2int(x mod y > 0);
array [Student] of int: normalized_break_disappointment = [ceil_div(break_disappointment[S],n_time_units_in_hour) | S in Student, ];
int: objective = sum([pow(ceil_div(student_break_importance[S]*normalized_break_disappointment[S]+(10-student_break_importance[S])*preference_disappointment[S],10),2) | S in Student, ]);
bool: X_INTRODUCED_2235_ = reverse_map(X_INTRODUCED_6981_);
test reverse_map(int: x) = x==1;
int: X_INTRODUCED_6981_ = 0;
bool: X_INTRODUCED_2234_ = reverse_map(X_INTRODUCED_6980_);
int: X_INTRODUCED_6980_ = 0;
bool: X_INTRODUCED_2233_ = reverse_map(X_INTRODUCED_6979_);
int: X_INTRODUCED_6979_ = 0;
bool: X_INTRODUCED_2232_ = reverse_map(X_INTRODUCED_6967_);
int: X_INTRODUCED_6967_;
bool: X_INTRODUCED_2231_ = reverse_map(X_INTRODUCED_6955_);
int: X_INTRODUCED_6955_;
bool: X_INTRODUCED_2230_ = reverse_map(X_INTRODUCED_6943_);
int: X_INTRODUCED_6943_;
bool: X_INTRODUCED_2229_ = reverse_map(X_INTRODUCED_6931_);
int: X_INTRODUCED_6931_;
bool: X_INTRODUCED_2228_ = reverse_map(X_INTRODUCED_6919_);
int: X_INTRODUCED_6919_;
bool: X_INTRODUCED_2227_ = reverse_map(X_INTRODUCED_6907_);
int: X_INTRODUCED_6907_;
bool: X_INTRODUCED_2226_ = reverse_map(X_INTRODUCED_6895_);
int: X_INTRODUCED_6895_;
bool: X_INTRODUCED_2225_ = reverse_map(X_INTRODUCED_6883_);
int: X_INTRODUCED_6883_;
bool: X_INTRODUCED_2224_ = reverse_map(X_INTRODUCED_6871_);
int: X_INTRODUCED_6871_;
bool: X_INTRODUCED_2223_ = reverse_map(X_INTRODUCED_6859_);
int: X_INTRODUCED_6859_;
bool: X_INTRODUCED_2222_ = reverse_map(X_INTRODUCED_6847_);
int: X_INTRODUCED_6847_;
bool: X_INTRODUCED_2221_ = reverse_map(X_INTRODUCED_6835_);
int: X_INTRODUCED_6835_;
bool: X_INTRODUCED_2220_ = reverse_map(X_INTRODUCED_6823_);
int: X_INTRODUCED_6823_;
bool: X_INTRODUCED_2219_ = reverse_map(X_INTRODUCED_6811_);
int: X_INTRODUCED_6811_;
bool: X_INTRODUCED_2218_ = reverse_map(X_INTRODUCED_6799_);
int: X_INTRODUCED_6799_;
bool: X_INTRODUCED_2217_ = reverse_map(X_INTRODUCED_6787_);
int: X_INTRODUCED_6787_;
bool: X_INTRODUCED_2216_ = reverse_map(X_INTRODUCED_6775_);
int: X_INTRODUCED_6775_;
bool: X_INTRODUCED_2215_ = reverse_map(X_INTRODUCED_6763_);
int: X_INTRODUCED_6763_;
bool: X_INTRODUCED_2214_ = reverse_map(X_INTRODUCED_6751_);
int: X_INTRODUCED_6751_;
bool: X_INTRODUCED_2213_ = reverse_map(X_INTRODUCED_6739_);
int: X_INTRODUCED_6739_;
bool: X_INTRODUCED_2212_ = reverse_map(X_INTRODUCED_6727_);
int: X_INTRODUCED_6727_;
bool: X_INTRODUCED_2211_ = reverse_map(X_INTRODUCED_6715_);
int: X_INTRODUCED_6715_;
bool: X_INTRODUCED_2210_ = reverse_map(X_INTRODUCED_6703_);
int: X_INTRODUCED_6703_;
bool: X_INTRODUCED_2209_ = reverse_map(X_INTRODUCED_6691_);
int: X_INTRODUCED_6691_;
bool: X_INTRODUCED_2208_ = reverse_map(X_INTRODUCED_6679_);
int: X_INTRODUCED_6679_;
bool: X_INTRODUCED_2207_ = reverse_map(X_INTRODUCED_6667_);
int: X_INTRODUCED_6667_;
bool: X_INTRODUCED_2206_ = reverse_map(X_INTRODUCED_6655_);
int: X_INTRODUCED_6655_;
array [Student,Group] of bool: GroupAssignmentB = [|X_INTRODUCED_2206_,X_INTRODUCED_2207_,X_INTRODUCED_2208_,X_INTRODUCED_2209_,X_INTRODUCED_2210_,X_INTRODUCED_2211_|X_INTRODUCED_2212_,X_INTRODUCED_2213_,X_INTRODUCED_2214_,X_INTRODUCED_2215_,X_INTRODUCED_2216_,X_INTRODUCED_2217_|X_INTRODUCED_2218_,X_INTRODUCED_2219_,X_INTRODUCED_2220_,X_INTRODUCED_2221_,X_INTRODUCED_2222_,X_INTRODUCED_2223_|X_INTRODUCED_2224_,X_INTRODUCED_2225_,X_INTRODUCED_2226_,X_INTRODUCED_2227_,X_INTRODUCED_2228_,X_INTRODUCED_2229_|X_INTRODUCED_2230_,X_INTRODUCED_2231_,X_INTRODUCED_2232_,X_INTRODUCED_2233_,X_INTRODUCED_2234_,X_INTRODUCED_2235_|];
